# %load ./helpCompound.py

from rdkit import Chem
from MainFunctions import getcompdict

# help compounds
# website to draw structure and compute SMILES:
# http://www.cheminfo.org/flavor/malaria/Utilities/SMILES_generator___checker/index.html
# or ChemDraw
hc_smilesDict = {
    'CH3COOH': 'CC(=O)O',
    'H2O': 'O',
    'H2': '[H][H]',
    'O2': 'O=O',
    'NH3': 'N',
    'N2': 'N#N',

    'Na+': '[Na+]',
    'K+': '[K+]',
    'NO2+': 'O=[N+]=O',
    'SO3-': 'O=S(O)[O-]',

    'CH4': 'C', #H2O was after this
    'HCl': 'Cl',
    'HBr': 'Br',
    'HI': 'I',
    'HF': 'F',
    'PH3': 'P', #NH3 was after this
#     'NH3': 'N',
    'H2S': 'S',

    'H3PO3': 'O=P(O)O',
    'H2SO4': 'O=S(=O)(O)O',
    'HNO3': 'O=N(=O)O',
    'HClO3': 'O=Cl(=O)O',

    'CH3OH': 'CO',
    'CH3CH2OH': 'CCO',  # ethanol
    'CH3CH2CH2OH': 'CCCO',
    'CH3CH2CH2CH2OH': 'CCCCO', #ethanoic acid was after this

#     'CH3COOH': 'CC(=O)O',
    'CH3CH2COOH': 'CCC(=O)O',
    'CH3CH2CH2COOH': 'CCCC(=O)O',

    'CH3OCH2COOH': 'COCC(=O)O',

    'C6H6': 'c1ccccc1',  # benzene
    'C6H5CH3': 'Cc1ccccc1',  # toluene
    'C6H5OH': 'Oc1ccccc1',  # phenol
    'C6H5Cl': 'Clc1ccccc1'
}

rxs_ids= {
    0: [506007],
    1: [16478368,
      18259376,
      16999929,
      17669282,
      16532872,
      28692842,
      15936966,
      3587155,
      16490171,
      16289331,
      16835842,
      16503633,
      17718728,
      6133474,
      16262803,
      16474573,
      3902901,
      16475737,
      28983178,
      15994867,
      17669283,
      15937459,
      16953050,
      15994744,
      15994743,
      14405424,
      16485385,
      16484106,
      16733579],
    2: [28182329, 16514685, 23163263, 27944166, 3587189, 16818691],
    3: [16770786,
      3587218,
      31585248,
      22989299,
      27987247,
      16504248,
      16514885,
      11335911,
      26591375,
      4950925,
      30719131,
      16855942,
      16868313],
    4: [14975703,
      3587154,
      16481245,
      14680594,
      16513264,
      16051411,
      16752555,
      16497709,
      17464070,
      9757005,
      16853108,
      16645898,
      16344183,
      16480090,
      16504355],
    5: [18239691, 23131181, 16825577, 3535119],
    6: [],
    7: [],
    8: [],
    9: [],
    10: [24624233,
      16418587,
      23479886,
      15997356,
      16819140,
      27580429,
      16707704,
      16707699,
      16504514,
      23044551,
      16733525,
      16609798,
      5489265,
      16305234,
      1718732,
      17199598,
      30914243,
      22919006,
      16290583,
      17121186,
      17606888,
      8253279,
      16512586,
      16210409,
      18183425,
      8137357,
      31767133,
      16488242,
      19714291,
      16708305,
      16021303,
      16515430,
      23009402,
      6378772,
      31939934,
      16030247,
      15900809,
      22939136,
      4360473,
      16014509,
      17182792,
      27904106,
      27027367,
      18162417,
      22923218,
      22966207,
      18162513,
      16704909,
      16504771,
      16770476,
      23124799,
      23669189],
    11: [24608586,
      16836402,
      14681183,
      3587171,
      15913435,
      16501060,
      7801727,
      16270663,
      19834398,
      1098214,
      16475562,
      16502419,
      3587163],
    12: [19231194,
      3587158,
      16767870,
      16953049,
      32435652,
      8137367,
      16350067,
      17252122,
      3587179,
      7801728,
      3587164],
    13: [19235722,
      4857092,
      3587159,
      7801729,
      13260132,
      3924806,
      15654752,
      13191432,
      3587184,
      14314981,
      7183122],
    14: [17804308,
      9189014,
      16845862,
      22706559,
      30535914,
      29920556,
      31535339,
      27914016,
      15346168,
      3535002,
      31364145,
      7631393,
      16484530,
      12273154,
      31497443,
      31990450,
      3587168],
    15: [3600171,
      16637179,
      16124019,
      28173516,
      11342918,
      16700864,
      16124280,
      17038085,
      16477580,
      23024892,
      16537462,
      16079940,
      16835703,
      16818083,
      16819540,
      16085506,
      22927825,
      16844873,
      16840622,
      16823091],
    16: [16502675,
      21096201,
      18146804,
      16882310,
      18081525,
      16756646,
      16756647,
      16482190,
      15993707,
      16812026,
      16744421,
      16506507,
      16860251,
      16866405,
      18088677,
      16023721,
      16479810,
      29006369,
      16856368,
      16708589,
      16733544,
      16833861,
      16742934,
      16771669,
      4921294,
      16815166,
      16505834,
      16866223,
      3902903,
      16514169,
      16861985,
      16510798,
      16862395,
      15917942,
      16509361,
      3535004,
      16863400],
    17: [1209272],
    18: [18778845, 27746102, 19242250, 2037554],
    19: [3587310],
    20: [3903350],
    21: [5725793, 1098229, 6378986],
    22: [1718733, 7125196, 6379086],
    23: [1098242],
    24: [6184745, 969148, 5725719],
#     24: [506007],
    25: [30634768, 506071],
    26: [906770],
    27: [635800],
    28: [4921477, 969212, 4124568, 3648202],
    29: [3928623, 28376744, 5242344, 635760, 4952623],
    30: [5805786, 969616, 4244235],
    31: [3603072, 605632, 6190543]}

hc_smilesDict={hcid:Chem.MolToSmiles(Chem.MolFromSmiles(hcsmiles)) for hcid,hcsmiles in hc_smilesDict.items()}
# rxs_ids={i:list(pd.read_sql_query('''SELECT SubstanceID from SubstanceDB Where Smiles= "'''+hcsmiles+ '''"'''+'''AND ">1 Compound"=0''',db).SubstanceID) for i,hcsmiles in enumerate(hc_smilesDict.values())}

hc_molDict = {hc: Chem.AddHs(Chem.MolFromSmiles(
    hc_smilesDict[hc])) for hc in hc_smilesDict}
hc_Dict={'h'+str(i):getcompdict(ID='h'+str(i),smiles=hcsmiles)['h'+str(i)] for i,hcsmiles in enumerate(hc_smilesDict.values())}
for i in hc_Dict.keys():
    hc_Dict[i].update({'rxs_ids':rxs_ids[int(i.split('h')[1])]})
hc_rct={hcid:hc_Dict[hcid] for hcid in ['h1','h2','h3','h10','h11','h12','h13','h14']} #Small compounds to add to LHS 
